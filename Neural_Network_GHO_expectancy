import pandas as pd
#import the dataset
dataset = pd.read_csv('life_expectancy.csv')
print(dataset.head())
print(dataset.describe())

#drop the Country column
dataset = dataset.drop(['Country'], axis = 1)

#split data into labels and features
labels = dataset.iloc[:, -1]
features = dataset.iloc[:, :-1]

#convert categorical columns into numerical
features = pd.get_dummies(features)

#split data into training and test sets
from sklearn.model_selection import train_test_split
features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.2, random_state=58)

#standardize numerical features
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import Normalizer
from sklearn.compose import ColumnTransformer
 
numerical_features = features.select_dtypes(include=['float64', 'int64'])
numerical_columns = numerical_features.columns
 
ct = ColumnTransformer([("only numeric", StandardScaler(), numerical_columns)], remainder='passthrough')

features_train_scaled = ct.fit_transform(features_train)
features_test_scaled = ct.fit_transform(features_test)

#build up a model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import InputLayer
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

my_model = Sequential()
my_input = InputLayer(input_shape = (features.shape[1], ))
my_model.add(my_input)
my_model.add(Dense(64, activation = "relu"))
my_model.add(Dense(1))
print(my_model.summary())

#create optimizer
opt = Adam(learning_rate = 0.01)
my_model.compile(loss = 'mse', metrics = ['mae'], optimizer = opt)

my_model.fit(features_train_scaled, labels_train, epochs = 50, batch_size = 1, verbose = 1)

res_mse, res_mae = my_model.evaluate(features_test_scaled, labels_test, verbose = 1)
print(res_mse, res_mae)
